<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="true"
      throwConfigExceptions="true"
      internalLogLevel="Info"
      internalLogFile="C:\Temp\Logs\NLogInternal\nlog-internal.log">
  <extensions>
    <add assembly="NLog.WindowsIdentity"/>
    <!--<add assembly="NLog.Web.AspNetCore"/>-->
    <!--<add assembly="NLogExtensions"/>-->
  </extensions>


  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="logFilePath" value="C:\Temp\Logs\LogViewer\"/>
  <variable name="applicationName" value="STAR_FileGenerator"/>
  <!--Replace LogTests here with the name of our Application-->
  <variable name="appVersion" value="${assembly-version:name=STAR_FileGenerator}"/>
  <!--Replace LogTests here with the name of our Assembly-->
  <variable name="dbConnectionString" value="Data Source=localhost;Initial Catalog=CESLogs;Integrated Security=true;MultipleActiveResultSets=true"/>
  <!--Only needed if we use a database target -->
  <variable name="fileBaseLayout" value="${longdate} ${uppercase:${level}} ${message} ${callsite} ${exception:format=toString,Data:maxInnerExceptionLevel=10}"/>
  <variable name="fileDetailsLayout" value="${onexception:inner=${stacktrace:format=Raw:topFrames=10:skipFrames=0:separator=&#13;&#10;}} ${when:when=level>=LogLevel.Info:inner=${windows-identity}} ${when:when=level>=LogLevel.Info:inner=${machinename}} ${when:when=level>=LogLevel.Info:inner=${var:applicationName}} ${when:when=level>=LogLevel.Info:inner=${var:appVersion}} ${all-event-properties}"/>

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>
    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <target name="ownFileJson"
			xsi:type="File"
			fileName="${var:logFilePath}${var:applicationName}_${shortdate}.json"
			archiveFileName="${var:logFilePath}${var:applicationName}_${shortdate}.archives.{###}.json"
			archiveAboveSize="5000000"
			archiveNumbering="Sequence"
			maxArchiveFiles="20">
      <layout xsi:type="JsonLayout" includeAllProperties="true">
        <!-- So all properties from structured logging are included -->
        <attribute name="TimeStamp"           layout="${longdate:universalTime=True}Z"/>
        <attribute name="LogLevel"            layout="${level:upperCase=True}"/>
        <!--<attribute name="EntryType"           layout="${EntryType}"/>-->
        <attribute name="ProcessId"           layout="${processid}"/>
        <attribute name="ProcessName"         layout="${processname}"/>
        <!--<attribute name="CopyNumber"          layout="${FirmID}"/>-->
        <attribute name="Source"              layout="${callsite}"/>
        <!--<attribute name="Logger"              layout="${LoggerName}"/>-->
        <attribute name="Logger"              layout="${logger}"/>
        <attribute name="HostName"            layout="${machinename:lowercase=True}"/>
        <attribute name="LoginName"           layout="${windows-identity:userName=True:domain=False}"/>
        <!--<attribute name="UserName"            layout="${UserName}"/>
        <attribute name="AppUserName"         layout="${AppUserName}"/>
        <attribute name="ChangeSetId"         layout="${ChangeSetID}"/>
        <attribute name="CorrelationId"       layout="${CorrelationID}"/>
        <attribute name="ParentCorrelationId" layout="${ParentCorrelationId}"/>
        <attribute name="EventId"             layout="${EventID}"/>
        <attribute name="OpCode"              layout="${OpCode}"/>-->
        <attribute name="Message"             layout="${message}"/>
        <!--<attribute name="Application"         layout="${all-event-properties}" />-->
        <attribute name="Application"         layout="${all-event-properties}" />
      </layout>
    </target>

    <target name="dbLogAsync" xsi:type="AsyncWrapper" batchSize="20" overflowAction="Block">
      <target name="dbLog"
              xsi:type="Database"
              connectionString="${var:dbConnectionString}"
              commandType="StoredProcedure"
              commandText="[pInsertLogEntry]">
        <parameter name="@level" layout="${uppercase:${level}}" />
        <parameter name="@time" layout="${date:format=yyyy-MM-dd HH\:mm\:ss\:fff}" />
        <parameter name="@logger" layout="${when:when=level>=LogLevel.Info:inner=${logger}:else=${db-null}}" />
        <parameter name="@message" layout="${message}" />
        <parameter name="@exception" layout="${whenEmpty:whenEmpty=${db-null}:inner=${exception:format=toString:separator=&#13;&#10;}}" />
        <parameter name="@stackTrace" layout="${onexception:inner=${stacktrace:format=Raw:topFrames=10:skipFrames=0:separator=&#13;&#10;}}" />
        <parameter name="@user" layout="${when:when=level>=LogLevel.Info:inner=${windows-identity}:else=${db-null}}" />
        <parameter name="@machine" layout="${when:when=level>=LogLevel.Info:inner=${machinename}:else=${db-null}}" />
        <parameter name="@applicationName" layout="${when:when=level>=LogLevel.Info:inner=${var:applicationName}:else=${db-null}}" />
        <parameter name="@applicationVersion" layout="${when:when=level>=LogLevel.Info:inner=${var:appVersion}:else=${db-null}}" />
        <parameter name="@callSource" layout="${callsite}" />
        <parameter name="@data" layout="${all-event-properties}" />
      </target>
    </target>

    <target name="allFileAsync" xsi:type="AsyncWrapper" overflowAction="Block">
      <target xsi:type="File"
              name="allFile"
              fileName="${var:logFilePath}${var:applicationName}_all_${shortdate}.log"
              archiveFileName="${var:logFilePath}${var:applicationName}_all_${shortdate}.archives.{###}.log"
              archiveAboveSize="5000000"
              archiveNumbering="Sequence"
              maxArchiveFiles="20"
              layout="${var:fileBaseLayout}" />
    </target>

    <target xsi:type="File"
            name="ownFile"
            fileName="${var:logFilePath}${var:applicationName}_own_${shortdate}.log"
            archiveFileName="${var:logFilePath}${var:applicationName}_own_${shortdate}.archives.{###}.log"
			      archiveAboveSize="5000000"
			      archiveNumbering="Sequence"
            layout="${var:fileBaseLayout} ${var:fileDetailsLayout}" />

    <!--<target xsi:type="ColoredConsole" name="coloredConsole" layout="${message} ${exception:format=toString,Data:maxInnerExceptionLevel=10}"/>-->
  </targets>


  <rules>
    <!-- add your logging rules here -->
    <!--Available levels: Trace, Debug, Info, Warn, Error and Fatal-->

    <logger name="*" minlevel="Trace" writeTo="allFileAsync" />

    <!--Skip non-critical Microsoft logs and so log only own logs-->
    <logger name="Microsoft.*" maxlevel="Warn" final="true" />
    <logger name="Quartz.*" maxlevel="Info" final="true" />
    <!-- BlackHole without writeTo -->

    <logger name="*" minlevel="Trace" writeTo="ownFileJson" />
    <logger name="*" minlevel="Trace" writeTo="ownFile" />
    <logger name="*" minlevel="Info" writeTo="dbLogAsync" />
    <!--<logger name="*" minlevel="Trace" writeTo="coloredConsole" />-->
  </rules>
</nlog>
